// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(cuid())
  email        String            @unique
  firstName    String
  lastName     String
  profileImage UserProfileImage?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  password     Password?
  username     Username?
  about        About?
  userLocation UserLocation?
  sessions     Session[]
  coverImage   UserCoverImage?
  roles        Role[]
  cocktails    Cocktail[]
  reviews      Review[]
  likes        Like[]
  dislikes     Dislike[]
}

model Username {
  id       String @id @default(cuid())
  username String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String @unique
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model UserProfileImage {
  id          String   @id @default(cuid())
  blob        Bytes
  contentType String
  altText     String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserCoverImage {
  id          String   @id @default(cuid())
  blob        Bytes
  contentType String
  altText     String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model About {
  about  String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String  @unique
}

model UserLocation {
  city     String?
  province String?
  country  String?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String  @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String

  @@index([userId])
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  type      String /// The type of verification, e.g. "email" or "phone"
  target    String /// The thing we're trying to verify, e.g. a user's email or phone number
  secret    String /// The secret key used to generate the otp
  algorithm String /// The algorithm used to generate the otp
  digits    Int /// The number of digits in the otp
  period    Int /// The number of seconds the otp is valid for
  charSet   String /// The valid characters for the otp
  expiresAt DateTime? /// When it's safe to delete this verification

  @@unique([target, type])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String?  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?      @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
  users       User[]
}

model Cocktail {
  id          String               @id @default(cuid())
  type        String
  name        String               @unique
  history     String
  description String
  garnish     String
  glass       String
  ice         String
  tip         String
  preparation String
  ingredients CocktailIngredient[]
  image       CocktailImage[]
  author      User                 @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  tags        Tag[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  reviews     Review[]
}

model CocktailImage {
  id             String       @id @default(cuid())
  blob           Bytes
  contentType    String
  altText        String?
  cocktail       Cocktail     @relation(fields: [cocktailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cocktailId     String
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photographerId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Photographer {
  id             String          @id @default(cuid())
  name           String
  href           String
  cocktailImages CocktailImage[]
}

model CocktailIngredient {
  id          String   @id @default(cuid())
  name        String
  measurement String
  cocktail    Cocktail @relation(fields: [cocktailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cocktailId  String
}

model Tag {
  id        String     @id @default(cuid())
  name      String
  cocktails Cocktail[]
}

model Review {
  id         String    @id @default(cuid())
  rating     Int
  review     String
  cocktail   Cocktail  @relation(fields: [cocktailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cocktailId String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  likes      Like[]
  dislikes   Dislike[]
}

model Like {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId String

  @@unique([userId, reviewId])
}

model Dislike {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId String

  @@unique([userId, reviewId])
}
